{"version":3,"sources":["js/plugins.js"],"names":["document","querySelector","addEventListener","event","console","log","placeholder","autoCompletejs","autoComplete","data","src","fetch","setAttribute","then","source","json","length","key","cache","sort","a","b","match","placeHolder","selector","threshold","debounce","searchEngine","highlight","maxResults","resultsList","render","container","destination","position","element","resultItem","content","innerHTML","noResults","result","createElement","appendChild","shareMyQuery","value","onSelection","window","onItemSelected","action","title","selection","gauge","gaugeText","style","opacity","forEach","eventType","display"],"mappings":";AACAA,SACGC,cAAc,iBACdC,iBAAiB,eAAgB,SAACC,GACjCC,QAAQC,IAAIF,KAIhB,IAAMG,EAAc,yCAGdC,EAAiB,IAAIC,aAAa,CACtCC,KAAM,CACJC,IAAK,WAMIC,OAJPX,SACGC,cAAc,iBACdW,aAAa,cAAe,cAExBD,MAAM,WACVE,KAAK,SAACC,GAAWA,OAAAA,EAAOC,SACxBF,KAAK,SAACJ,GAOEA,OALPT,SACGC,cAAc,iBACdW,aAAa,cAAeN,GAE/BF,QAAQC,IAAI,cAAeI,EAAKO,QACzBP,KAGbQ,IAAK,CAAC,OAAQ,WACdC,OAAO,GAETC,KAAM,SAACC,EAAGC,GACJD,OAAAA,EAAEE,MAAQD,EAAEC,OAAe,EAC3BF,EAAEE,MAAQD,EAAEC,MAAc,EACvB,GAETC,YAAajB,EACbkB,SAAU,gBACVC,UAAW,EACXC,SAAU,IACVC,aAAc,QACdC,WAAW,EACXC,WAAY,GACZC,YAAa,CACXC,QAAQ,EACRC,UAAW,SAAClB,GACVA,EAAOF,aAAa,KAAM,sBAE5BqB,YAAajC,SAASC,cAAc,iBACpCiC,SAAU,WACVC,QAAS,MAEXC,WAAY,CACVC,QAAS,SAAC5B,EAAMK,GACdA,EAAOwB,UAAY7B,EAAKa,OAE1Ba,QAAS,MAEXI,UAAW,WACHC,IAAAA,EAASxC,SAASyC,cAAc,MACtCD,EAAO5B,aAAa,QAAS,aAC7B4B,EAAO5B,aAAa,WAAY,KAChC4B,EAAOF,UAAY,aACnBtC,SAASC,cAAc,sBAAsByC,YAAYF,GACzDG,aAAa3C,SAASC,cAAc,iBAAiB2C,QAEvDC,YAAaC,OAAOC,iBAIhBC,EAAS,SAAUA,GACThD,SAASC,cAAc,WAA/BgD,IACAC,EAAYlD,SAASC,cAAc,cAGnCkD,EAAQnD,SAASC,cAAc,SAC/BmD,EAAYpD,SAASC,cAAc,sBAE1B,QAAX+C,GAEFE,EAAUG,MAAMC,QAAU,EAC1BH,EAAME,MAAMC,QAAU,EACtBF,EAAUC,MAAMC,QAAU,IAI1BJ,EAAUG,MAAMC,QAAU,GAC1BH,EAAME,MAAMC,QAAU,GACtBF,EAAUC,MAAMC,QAAU,KAO9B,CAAC,QAAS,QAAQC,QAAQ,SAAUC,GAC5B1B,IAAAA,EAAc9B,SAASC,cAAc,sBAE3CD,SACGC,cAAc,iBACdC,iBAAiBsD,EAAW,WAET,SAAdA,GACFR,EAAO,OACPlB,EAAYuB,MAAMI,QAAU,QACL,UAAdD,IAETR,EAAO,SACPlB,EAAYuB,MAAMI,QAAU","file":"plugins.5e6b3914.js","sourceRoot":"..","sourcesContent":["// autoComplete.js on typing event emitter\ndocument\n  .querySelector(\"#autoComplete\")\n  .addEventListener(\"autoComplete\", (event) => {\n    console.log(event);\n  });\n\n// let data = null;\nconst placeholder = \"Type product or brand name to check...\";\n\n// The autoComplete.js Engine instance creator\nconst autoCompletejs = new autoComplete({\n  data: {\n    src: () => {\n      // Loading placeholder text\n      document\n        .querySelector(\"#autoComplete\")\n        .setAttribute(\"placeholder\", \"Loading...\");\n      // Fetch External Data Source\n      return fetch(\"db.json\")\n        .then((source) => source.json())\n        .then((data) => {\n          // Post loading placeholder text\n          document\n            .querySelector(\"#autoComplete\")\n            .setAttribute(\"placeholder\", placeholder);\n          // Returns Fetched data\n          console.log(\"DB length -\", data.length);\n          return data;\n        });\n    },\n    key: [\"name\", \"company\"],\n    cache: true,\n  },\n  sort: (a, b) => {\n    if (a.match < b.match) return -1;\n    if (a.match > b.match) return 1;\n    return 0;\n  },\n  placeHolder: placeholder,\n  selector: \"#autoComplete\",\n  threshold: 1,\n  debounce: 100,\n  searchEngine: \"loose\",\n  highlight: true,\n  maxResults: 10,\n  resultsList: {\n    render: true,\n    container: (source) => {\n      source.setAttribute(\"id\", \"autoComplete_list\");\n    },\n    destination: document.querySelector(\"#autoComplete\"),\n    position: \"afterend\",\n    element: \"ul\",\n  },\n  resultItem: {\n    content: (data, source) => {\n      source.innerHTML = data.match;\n    },\n    element: \"li\",\n  },\n  noResults: () => {\n    const result = document.createElement(\"li\");\n    result.setAttribute(\"class\", \"no_result\");\n    result.setAttribute(\"tabindex\", \"1\");\n    result.innerHTML = \"No Results\";\n    document.querySelector(\"#autoComplete_list\").appendChild(result);\n    shareMyQuery(document.querySelector(\"#autoComplete\").value);\n  },\n  onSelection: window.onItemSelected,\n});\n\n// Toggle results list and other elements\nconst action = function (action) {\n  const title = document.querySelector(\".header\");\n  const selection = document.querySelector(\".selection\");\n  //const guideText = document.querySelector(\".userguide-text\");\n\n  const gauge = document.querySelector(\"#demo\");\n  const gaugeText = document.querySelector(\"#preview-textfield\");\n\n  if (action === \"dim\") {\n    //title.style.opacity = 1;\n    selection.style.opacity = 1;\n    gauge.style.opacity = 1;\n    gaugeText.style.opacity = 1;\n    //guideText.style.opacity = 1;\n  } else {\n    //title.style.opacity = 0.3;\n    selection.style.opacity = 0.1;\n    gauge.style.opacity = 0.3;\n    gaugeText.style.opacity = 0.3;\n    //guideText.style.opacity = 0.3;\n  }\n};\n\n// Toggle event for search input\n// showing & hidding results list onfocus / blur\n[\"focus\", \"blur\"].forEach(function (eventType) {\n  const resultsList = document.querySelector(\"#autoComplete_list\");\n\n  document\n    .querySelector(\"#autoComplete\")\n    .addEventListener(eventType, function () {\n      // Hide results list & show other elements\n      if (eventType === \"blur\") {\n        action(\"dim\");\n        resultsList.style.display = \"none\";\n      } else if (eventType === \"focus\") {\n        // Show results list & hide other elements\n        action(\"light\");\n        resultsList.style.display = \"block\";\n      }\n    });\n});\n"]}